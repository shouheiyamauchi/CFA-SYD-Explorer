<script src="https://unpkg.com/moment@2.17.1"></script>
<script src="https://unpkg.com/interactjs@1"></script>
<script src="https://unpkg.com/angular-animate@1.6.4/angular-animate.js"></script>
<script src="https://unpkg.com/angular-ui-bootstrap@2/dist/ui-bootstrap-tpls.js"></script>
<script src="https://unpkg.com/rrule@2"></script>
<script src="https://unpkg.com/angular-bootstrap-colorpicker@3"></script>
<script src="https://unpkg.com/angular-bootstrap-calendar"></script>
<link href="https://unpkg.com/angular-bootstrap-calendar/dist/css/angular-bootstrap-calendar.min.css" rel="stylesheet">

<script>
    angular.module('mwl.calendar.docs', ['mwl.calendar', 'ngAnimate', 'ui.bootstrap', 'colorpicker.module']);
    angular
      .module('mwl.calendar.docs') //you will need to declare your module with the dependencies ['mwl.calendar', 'ui.bootstrap', 'ngAnimate']
      .controller('KitchenSinkCtrl', function(moment, alert, calendarConfig) {

        var vm = this;

        var dates = []

        var pending_events = <%= @pending_events.inspect.html_safe %>;
        var future_events = <%= @future_events.inspect.html_safe %>;
        var past_events = <%= @past_events.inspect.html_safe %>;

        for (i = 0; i < <%= @pending_events.count %>; i++) {
          var hash = {
            title: pending_events[i][0],
            color: calendarConfig.colorTypes.warning,
            startsAt: new Date(pending_events[i][1]),
            draggable: true,
            resizable: true,
            actions: actions
          }
          dates.push(hash)
        };

        for (i = 0; i < <%= @future_events.count %>; i++) {
          var hash = {
            title: future_events[i][0],
            color: calendarConfig.colorTypes.info,
            startsAt: new Date(future_events[i][1]),
            draggable: true,
            resizable: true,
            actions: actions
          }
          dates.push(hash)
        };

        for (i = 0; i < <%= @past_events.count %>; i++) {
          var hash = {
            title: past_events[i][0],
            color: calendarConfig.colorTypes.important,
            startsAt: new Date(past_events[i][1]),
            draggable: true,
            resizable: true,
            actions: actions
          }
          dates.push(hash)
        };

        var events_array = [
          {
            title: 'hello',
            color: calendarConfig.colorTypes.warning,
            startsAt: moment().startOf('week').subtract(2, 'days').add(8, 'hours').toDate(),
            endsAt: moment().startOf('week').add(1, 'week').add(9, 'hours').toDate(),
            draggable: true,
            resizable: true,
            actions: actions
          }, {
            title: '<i class="glyphicon glyphicon-asterisk"></i> <span class="text-primary">Another event</span>, with a <i>html</i> title',
            color: calendarConfig.colorTypes.info,
            startsAt: moment().subtract(1, 'day').toDate(),
            endsAt: moment().add(5, 'days').toDate(),
            draggable: true,
            resizable: true,
            actions: actions
          }, {
            title: 'This is a really long event title that occurs on every year',
            color: calendarConfig.colorTypes.important,
            startsAt: moment().startOf('day').add(7, 'hours').toDate(),
            endsAt: moment().startOf('day').add(19, 'hours').toDate(),
            recursOn: 'year',
            draggable: true,
            resizable: true,
            actions: actions
          }
        ];

        //These variables MUST be set as a minimum for the calendar to work
        vm.calendarView = 'month';
        vm.viewDate = new Date();
        var actions = [];
        vm.events = dates;

        vm.cellIsOpen = true;

        vm.addEvent = function() {
          vm.events.push({
            title: 'New event',
            startsAt: moment().startOf('day').toDate(),
            endsAt: moment().endOf('day').toDate(),
            color: calendarConfig.colorTypes.important,
            draggable: true,
            resizable: true
          });
        };

        vm.eventClicked = function(event) {
          alert.show('Clicked', event);
        };

        vm.eventEdited = function(event) {
          alert.show('Edited', event);
        };

        vm.eventDeleted = function(event) {
          alert.show('Deleted', event);
        };

        vm.eventTimesChanged = function(event) {
          alert.show('Dropped or resized', event);
        };

        vm.toggle = function($event, field, event) {
          $event.preventDefault();
          $event.stopPropagation();
          event[field] = !event[field];
        };

        vm.timespanClicked = function(date, cell) {

          if (vm.calendarView === 'month') {
            if ((vm.cellIsOpen && moment(date).startOf('day').isSame(moment(vm.viewDate).startOf('day'))) || cell.events.length === 0 || !cell.inMonth) {
              vm.cellIsOpen = false;
            } else {
              vm.cellIsOpen = true;
              vm.viewDate = date;
            }
          } else if (vm.calendarView === 'year') {
            if ((vm.cellIsOpen && moment(date).startOf('month').isSame(moment(vm.viewDate).startOf('month'))) || cell.events.length === 0) {
              vm.cellIsOpen = false;
            } else {
              vm.cellIsOpen = true;
              vm.viewDate = date;
            }
          }

        };

      });

    </script>
    <script>
    angular
      .module('mwl.calendar.docs')
      .factory('alert', function($uibModal) {

        function show(action, event) {
          return $uibModal.open({
            templateUrl: 'modalContent.html',
            controller: function() {
              var vm = this;
              vm.action = action;
              vm.event = event;
            },
            controllerAs: 'vm'
          });
        }

        return {
          show: show
        };

      });

    </script>

<div class="grid-stack-item calendar"
    data-gs-x="0" data-gs-y="0"
    data-gs-width="12" data-gs-height="0" data-custom-id="calendar">
  <div class="grid-stack-item-content">
    <div class="title">
      <i class="material-icons">date_range</i> Calendar
    </div>
    <div class="content">

      <div ng-controller="KitchenSinkCtrl as vm">
        <h2 class="text-center">{{ vm.calendarTitle }}</h2>

        <div class="row">

          <div class="col-md-6 text-center">
            <div class="btn-group">

              <button
                class="btn btn-primary"
                mwl-date-modifier
                date="vm.viewDate"
                decrement="vm.calendarView"
                ng-click="vm.cellIsOpen = false">
                Previous
              </button>
              <button
                class="btn btn-default"
                mwl-date-modifier
                date="vm.viewDate"
                set-to-today
                ng-click="vm.cellIsOpen = false">
                Today
              </button>
              <button
                class="btn btn-primary"
                mwl-date-modifier
                date="vm.viewDate"
                increment="vm.calendarView"
                ng-click="vm.cellIsOpen = false">
                Next
              </button>
            </div>
          </div>

          <br class="visible-xs visible-sm">

          <div class="col-md-6 text-center">
            <div class="btn-group">
              <label class="btn btn-primary" ng-model="vm.calendarView" uib-btn-radio="'year'" ng-click="vm.cellIsOpen = false">Year</label>
              <label class="btn btn-primary" ng-model="vm.calendarView" uib-btn-radio="'month'" ng-click="vm.cellIsOpen = false">Month</label>
              <label class="btn btn-primary" ng-model="vm.calendarView" uib-btn-radio="'week'" ng-click="vm.cellIsOpen = false">Week</label>
              <label class="btn btn-primary" ng-model="vm.calendarView" uib-btn-radio="'day'" ng-click="vm.cellIsOpen = false">Day</label>
            </div>
          </div>

        </div>

        <br>

        <mwl-calendar
          events="vm.events"
          view="vm.calendarView"
          view-title="vm.calendarTitle"
          view-date="vm.viewDate"
          on-event-click="vm.eventClicked(calendarEvent)"
          on-event-times-changed="vm.eventTimesChanged(calendarEvent); calendarEvent.startsAt = calendarNewEventStart; calendarEvent.endsAt = calendarNewEventEnd"
          cell-is-open="vm.cellIsOpen"
          day-view-start="06:00"
          day-view-end="22:59"
          day-view-split="30"
          cell-modifier="vm.modifyCell(calendarCell)"
          cell-auto-open-disabled="true"
          on-timespan-click="vm.timespanClicked(calendarDate, calendarCell)">
        </mwl-calendar>

      </div>

    </div>
  </div>
</div>
